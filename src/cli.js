import { Command } from 'commander';
import chalk from 'chalk';

export class CLI {
  constructor() {
    this.program = new Command();
    this.setupCommands();
  }

  setupCommands() {
    this.program
      .name('website-screenshooter')
      .description('–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –≤–µ–±-—Å–∞–π—Ç—ñ–≤')
      .version('1.0.0');

    this.program
      .option('-c, --config <path>', '–®–ª—è—Ö –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É', 'config.json')
      .option('-s, --site <name>', '–û–±—Ä–æ–±–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤–∫–∞–∑–∞–Ω–∏–π —Å–∞–π—Ç')
      .option('-p, --pages <types>', '–¢–∏–ø–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (—á–µ—Ä–µ–∑ –∫–æ–º—É): home,category,product', 'home,category,product')
      .option('-l, --languages <langs>', '–ú–æ–≤–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É): default,en', 'default,en')
      .option('-d, --devices <devices>', '–ü—Ä–∏—Å—Ç—Ä–æ—ó (—á–µ—Ä–µ–∑ –∫–æ–º—É): desktop,mobile', 'desktop,mobile')
      .option('-o, --output <dir>', '–ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤', './output')
      .option('--retry <count>', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ', '3')
      .option('--delay <ms>', '–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏ (–º—Å)', '2000')
      .option('--headless', '–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ headless —Ä–µ–∂–∏–º—ñ', true)
      .option('--verbose', '–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥', false);
  }

  async handleCommand() {
    try {
      this.program.parse();
      const options = this.program.opts();
      const parsedOptions = this.parseOptions(options);
      this.printStartInfo(parsedOptions);
      return parsedOptions;

    } catch (error) {
      this.printError('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤:', error.message);
      process.exit(1);
    }
  }

  parseOptions(options) {
    const parsed = {
      config: options.config,
      site: options.site,
      pages: this.parseList(options.pages),
      languages: this.parseList(options.languages),
      devices: this.parseList(options.devices),
      output: options.output,
      retry: parseInt(options.retry),
      delay: parseInt(options.delay),
      headless: options.headless,
      verbose: options.verbose
    };

    this.validateOptions(parsed);
    return parsed;
  }

  parseList(value) {
    if (typeof value === 'string') {
      return value.split(',').map(item => item.trim()).filter(item => item);
    }
    return value;
  }

  validateOptions(options) {
    const validPages = ['home', 'category', 'product'];
    const invalidPages = options.pages.filter(page => !validPages.includes(page));
    if (invalidPages.length > 0) {
      throw new Error(`–ù–µ–≤—ñ—Ä–Ω—ñ —Ç–∏–ø–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫: ${invalidPages.join(', ')}. –î–æ—Å—Ç—É–ø–Ω—ñ: ${validPages.join(', ')}`);
    }

    const validLanguages = ['default', 'en'];
    const invalidLanguages = options.languages.filter(lang => !validLanguages.includes(lang));
    if (invalidLanguages.length > 0) {
      throw new Error(`–ù–µ–≤—ñ—Ä–Ω—ñ –º–æ–≤–∏: ${invalidLanguages.join(', ')}. –î–æ—Å—Ç—É–ø–Ω—ñ: ${validLanguages.join(', ')}`);
    }

    const validDevices = ['desktop', 'mobile'];
    const invalidDevices = options.devices.filter(device => !validDevices.includes(device));
    if (invalidDevices.length > 0) {
      throw new Error(`–ù–µ–≤—ñ—Ä–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó: ${invalidDevices.join(', ')}. –î–æ—Å—Ç—É–ø–Ω—ñ: ${validDevices.join(', ')}`);
    }

    if (options.retry < 1 || options.retry > 10) {
      throw new Error('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 10');
    }

    if (options.delay < 0 || options.delay > 10000) {
      throw new Error('–ó–∞—Ç—Ä–∏–º–∫–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0 –¥–æ 10000 –º—Å');
    }
  }

  printStartInfo(options) {
    console.log(chalk.blue.bold('\nüöÄ Website Screenshooter'));
    console.log(chalk.gray('================================\n'));

    console.log(chalk.cyan('üìã –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:'));
    console.log(`   –ö–æ–Ω—Ñ—ñ–≥: ${chalk.white(options.config)}`);
    console.log(`   –°–∞–π—Ç: ${chalk.white(options.site || '–≤—Å—ñ')}`);
    console.log(`   –°—Ç–æ—Ä—ñ–Ω–∫–∏: ${chalk.white(options.pages.join(', '))}`);
    console.log(`   –ú–æ–≤–∏: ${chalk.white(options.languages.join(', '))}`);
    console.log(`   –ü—Ä–∏—Å—Ç—Ä–æ—ó: ${chalk.white(options.devices.join(', '))}`);
    console.log(`   –í–∏—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞: ${chalk.white(options.output)}`);
    console.log(`   –°–ø—Ä–æ–±–∏: ${chalk.white(options.retry)}`);
    console.log(`   –ó–∞—Ç—Ä–∏–º–∫–∞: ${chalk.white(options.delay)}–º—Å`);
    console.log(`   Headless: ${chalk.white(options.headless ? '—Ç–∞–∫' : '–Ω—ñ')}`);
    console.log(`   –î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥: ${chalk.white(options.verbose ? '—Ç–∞–∫' : '–Ω—ñ')}\n`);

    const totalTasks = options.pages.length * options.languages.length * options.devices.length;
    const sitesCount = options.site ? 1 : '–≤—Å—ñ';

    console.log(chalk.yellow(`üìä –û—á—ñ–∫—É—î—Ç—å—Å—è: ${totalTasks} —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –Ω–∞ ${sitesCount} —Å–∞–π—Ç(—ñ–≤)\n`));
  }

  printError(message, details = '') {
    console.error(chalk.red.bold('‚ùå –ü–æ–º–∏–ª–∫–∞:'), chalk.red(message));
    if (details) {
      console.error(chalk.gray(details));
    }
  }

  printSuccess(message) {
    console.log(chalk.green.bold('‚úÖ'), chalk.green(message));
  }

  printWarning(message) {
    console.log(chalk.yellow.bold('‚ö†Ô∏è'), chalk.yellow(message));
  }

  printInfo(message) {
    console.log(chalk.blue('‚ÑπÔ∏è'), chalk.white(message));
  }

  printProgress(current, total, message = '') {
    const percentage = Math.round((current / total) * 100);
    const progressBar = this.createProgressBar(percentage);

    process.stdout.write(`\r${chalk.cyan(progressBar)} ${percentage}% ${message}`);

    if (current === total) {
      process.stdout.write('\n');
    }
  }

  createProgressBar(percentage, length = 30) {
    const filled = Math.round((percentage / 100) * length);
    const empty = length - filled;
    return `[${'‚ñà'.repeat(filled)}${'‚ñë'.repeat(empty)}]`;
  }

  printHelp() {
    this.program.help();
  }

  parse() {
    return this.program.parse();
  }
}
